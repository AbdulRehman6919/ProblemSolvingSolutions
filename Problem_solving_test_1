#Simple Max Difference

#Some inputs to the file:
# temp_list = [7,1,2,5]  
# temp_list = [2,3,10,2,4,8,1]
# temp_list = [7,9,5,6,3,2]
# temp_list = [7,5,3,1]
# temp_list = [10,20,3,4,50,160]

def maximize_diff(temp_list):
    curr_val = -1
    for index,value  in enumerate(temp_list[1:]):
        index=index+1
        value = temp_list[index]
#         print(list(map(lambda x: x-value,temp_list[0:index:1])))
#         print(temp_list[0:index:1])
        max_value = max(list(map(lambda x: value-x,temp_list[0:index:1])))
        if max_value > curr_val:
            curr_val =max_value
    return curr_val
    
    

#Team Formation 2

from functools import reduce
from operator import mul

def factorial_num(num):
    if num==0 or num ==1:
        return 1
    return reduce(mul,range(1,num+1))

def calculate_combinations(skills,min_players,minLevel,maxLevel):
    temp_list = [i for i in skills if i>=minLevel and i<=maxLevel]
    total_comb = 0
    for i in range(min_players,len(temp_list)+1):
        temp_var = factorial_num(len(temp_list)) //(factorial_num(i)*factorial_num(len(temp_list)-i))
        total_comb +=temp_var
    return total_comb

# skills = [12,4,6,13,5,10] 
# min_players = 3
# minLevel = 4
# maxLevel = 10
# combinations = calculate_combinations(skills,min_players,minLevel,maxLevel)
# print("Total combinations are: ",combinations)




#Merging the Pallendromes

def return_dict(s1):
    dict_1={}
    for i in s1:
        if i not in dict_1:
            dict_1[i] = s1.count(i)
    return dict_1



def returns_odd_list(dict_1):
    odd_list=[]
    for key in dict_1:
        if  dict_1[key] ==1:
            odd_list.append(key)
        elif dict_1[key]%2==0:
            whole_list.extend(list(key*(dict_1[key])))
        else:
            whole_list.extend(list(key*(dict_1[key]-1)))
            odd_list.append(key)
    odd_list.sort()
    if len(odd_list)>=1:
        return odd_list[0]
    return  ""

def returns_final_list(dict_1):
    even_list,odd_list=[],[]
    for key in dict_1:
        if dict_1[key] ==1:
            odd_list.append(key)
        elif dict_1[key]%2==0:
            even_list.append(key*(dict_1[key]//2))
        else:
            even_list.append(key*((dict_1[key]-1)//2))
            odd_list.append(key)
    odd_list.sort()
    even_list.sort()
    check =False
    if len(odd_list)>=1:
        return "".join(even_list)+str(odd_list[0]),True
    return  "".join(even_list)+"",False


def merging_pallendromes(s1,s2):
    global whole_list
    whole_list = []

    data= return_dict(s1)
    odd_element = returns_odd_list(data)
    whole_list.append(odd_element)
    data= return_dict(s2)
    odd_element = returns_odd_list(data)
    whole_list.append(odd_element)
    data = return_dict("".join(whole_list))
    new_data = returns_final_list(data)

    if new_data[1] ==True:
        return(new_data[0][:]+new_data[0][len(new_data[0])-2::-1])
    else:
        return (new_data[0][:]+new_data[0][::-1])

    
# s1= 'aabbc'
# s2 = 'ddefefq'
# merging_pallendromes(s1,s2)
    
s1= 'aab'
s2 = 'cca'
merging_pallendromes(s1,s2)


#Maximize the Difference

def maximize_difference(new_list):
    new_list.sort()
    new_array = []
    if len(new_list) %2==0:
        for i,j in zip(range((len(new_list)//2)-1,-1,-1),range((len(new_list)//2),len(new_list))):
            new_array.extend([new_list[i],new_list[j]])
    else:
        new_array.append(new_list[len(new_list)//2])
        for i,j in zip(range(0, len(new_list)//2),range((len(new_list)//2)+1,len(new_list))):
            new_array.extend([new_list[j],new_list[i]])
    return new_array

new_list=[1,2,3,4,5]
new_list = [5,7,9,21,34]
new_list=[1,2,3,4]
new_list = [4,5]
new_list = [100,10,40,50,60]
new_list = [0,2,3,4,6,8]
maximize_difference(new_list) 


#Correct Solution for Maximize the Difference

def rearrange(arr):
    # Write your code here
    arr.sort()
    new_array = []
    if len(arr) %2==0:
        new_array.extend([arr[(len(arr)//2)-1],arr[(len(arr)//2)]])
        
        for i,j in zip(range(0,(len(arr)//2)-1,1),range((len(arr)//2)+1,len(arr))):
            new_array.extend([arr[i],arr[j]])
    else:
        
        new_array.append(arr[len(arr)//2])
        for i,j in zip(range(0, len(arr)//2),range((len(arr)//2)+1,len(arr))):
            new_array.extend([arr[j],arr[i]])
    return new_array
